Implementation Plan: Integrate anatomy_viewer component into ts_next_app

1. Convert anatomy_viewer into a reusable library
   - Extract core React component(s) (e.g. AnatomyViewer) from apps/anatomy_viewer/src
   - Create new package under packages/anatomy-viewer or repurpose apps/anatomy_viewer:
     * Update package.json: name "@tidyscripts/anatomy-viewer", add "main"/"module"/"types" fields
     * Define peerDependencies: react, react-dom, three, @react-three/fiber, @react-three/drei
     * Configure bundler (Rollup/tsup/microbundle) to output ESM/CJS in dist/
     * Add build/dev/test scripts

2. Update monorepo workspaces
   - Ensure the new package is covered by root workspaces (packages/*)
   - Remove or archive CRA build assets if no longer needed

3. Add dependency in ts_next_app
   - In apps/ts_next_app/package.json, add:
       "@tidyscripts/anatomy-viewer": "workspace:*"
   - Run root npm install to link workspaces

4. Configure TypeScript and Next.js
   - In ts_next_app/tsconfig.json, add path alias if necessary:
       "paths": { "@tidyscripts/anatomy-viewer": ["../packages/anatomy-viewer/src"] }
   - In next.config.js, set:
       transpilePackages: ['@tidyscripts/anatomy-viewer']

5. Integrate in ts_next_app UI
   - Create pages/anatomy-viewer.tsx that imports and renders AnatomyViewer
   - Add navigation/menu entry to access the component

6. Update Turbo pipeline
   - In turbo.json, under tasks.build.outputs, include:
       "packages/anatomy-viewer/dist/**"
   - (Optional) Include "apps/anatomy_viewer/build/**" if retaining CRA build

7. Testing, Linting, Documentation
   - Add smoke tests for the component in ts_next_app
   - Update ESLint/TSLint configs if needed
   - Document usage in README of the new package and ts_next_app

8. CI/CD and Publishing
   - Ensure CI build includes anatomy-viewer build
   - Configure versioning and publish_package script for anatomy-viewer

Estimated effort: ~1-2 days