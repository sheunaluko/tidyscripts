

/* 
 Main voice interface for controlling speech recognition and tts at high level 
 */

import * as sr from "./speech_recognition.ts" 
import * as tts from "./tts.ts" 
import * as ap from "./audio_processing.ts" 


/* 
 audio_processing.ts    | connects to microphone and detects when there is sound occuring 
 speech_recognition.ts  | starts and stops speech recognition and provides recognition results 
 tts.ts                 | will perform speech synthesis given a string 
 
 This file combines the three aforementioned libraries to create an out of the box seamless 
 voice/ tts experience. 
 
 The audio processor is used to detect when a spike in volume has occured, and it triggers 
 the speech recognizer to start listening. 
 
 When the tts.speak function is called, the speech recognizer is automatically paused until tts 
 has finished. 
 
 To use, simply call initialize_recognition() , and the recognition results will be available by 
 listending to the window.addEventListener( 'tidyscripts_web_speech_recognition_result' , (e) => e.detail ) handler 
 
 For tts, call speak(text) 
 
 
*/ 

export var recognition : any  = null 

export enum RecognitionState {
    NULL = "NULL", 
    PAUSED = "PAUSED" ,  
    LISTENING = "LISTENING", 
}
export var recognition_state : RecognitionState = RecognitionState.NULL 


export function initialize_recognition(ops? : sr.RecognitionOps) {
    ops = ops || {} 
    
    let old_on_end = ops.onEnd 

    ops.onEnd = function() {
	recognition_state = RecognitionState.PAUSED 
	console.log("Recognition ended") 
	old_on_end ? old_on_end() : null 
    } 
    
    recognition = sr.get_recognition_object(ops)
    recognition_state = RecognitionState.PAUSED
    //now we start the audio detector
    ap.audio_detector(start_recognition) 
    return 
}

export function pause_recognition() {
    if (recognition) {
	recognition.abort() 
	recognition_state = RecognitionState.PAUSED
    } 
} 

export function stop_recognition() {
    if (recognition) {
	recognition.abort()
	recognition = null
	recognition_state = RecognitionState.NULL	
    } 
    ap.stop()
} 

export async function start_recognition() {
    //if tts is speaking then we should wait 
    if (recognition_state == RecognitionState.LISTENING) {
	//console.log("Already listening")
	return 
    } 
    
    if (tts.is_speaking()) {
	console.log("Wont start recognition will tts active")
    }
    
    if (recognition) {
	recognition.start() 
    } else { 
	initialize_recognition()
	console.log("Recognition initialized without args") 
    } 
    recognition_state = RecognitionState.LISTENING
} 


export async function speak(text : string) {
    if (recognition) {
	pause_recognition() 
	tts.speak({text})
	await tts.finished_speaking()
	start_recognition()
    } else { 
	tts.speak({text})
	await tts.finished_speaking()
    } 
    return 
} 

