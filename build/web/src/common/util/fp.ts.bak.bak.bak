

import {Indexer} from "types" 


export function map<I,O>(arr : I[] , mapper : (x : I) => O): O[] { 
    return arr.map(mapper) 
} 

export function keys(a : {[i:Indexer] : any}) : T[] { 
    return Object.keys(a) 
} 

export function values(a : {[i:Indexer] : any}) : any[] { 
    let ks = keys(a) 
    return map(ks,(k:Indexer)=>a[k]) 
} 

export function all_true(arr : boolean[]) : boolean { 
    return arr.reduce( (a,b)=> (a && b) ) 
} 


export function repeat<T>(thing : T, num : number) : T[]{
    return (Array(num) as any).fill(thing) 
} 
