import { spawn, ChildProcessWithoutNullStreams } from 'child_process';\nimport { EventEmitter } from 'events';\n\nexport class ProcessManager extends EventEmitter {\n\n  private process: ChildProcessWithoutNullStreams | null = null;\n\n  constructor() {\n    super();\n  }\n\n  startProcess(command: string) {\n    this.process = spawn(command, {\n      shell: true,\n      stdio: ['pipe', 'pipe', 'pipe']\n    });\n    this.process.stdout.on('data', (data) => {\n      this.emit('stdout', data.toString());\n    });\n    this.process.stderr.on('data', (data) => {\n      this.emit('stderr', data.toString());\n    });\n    this.process.on('close', (code) => {\n      this.emit('close', code);\n    });\n  }\n\n  stopProcess() {\n    if (this.process) {\n      this.process.stdin.end();\n    }\n  }\n}\n
