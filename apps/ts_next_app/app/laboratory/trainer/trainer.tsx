'use client';

import React, { useState } from 'react';

/*
import AceEditor from "react-ace";

import "ace-builds/src-noconflict/mode-json";
import "ace-builds/src-noconflict/theme-kuroir";
import "ace-builds/src-noconflict/theme-solarized_dark";
import "ace-builds/src-noconflict/ext-language_tools";
*/


import * as tsw from "tidyscripts_web";
import useInit from "../../../hooks/useInit";

import {theme} from "../../theme";
import { ThemeProvider, createTheme } from '@mui/material/styles';
import { Box, TextField, Button, Typography } from "@mui/material";

import {store_user_doc, store_user_collection} from "../../../src/firebase_utils"
import * as fbu from  "../../../src/firebase_utils"

const log    = tsw.common.logger.get_logger({id:"trainer"});
const debug  = tsw.common.util.debug
const fp     = tsw.common.fp


const Trainer = () => {

    let init = async function() {
        /* Assign tidyscripts library to window */
        if (typeof window !== 'undefined') { 
            Object.assign(window, {
                tsw,
		fp,
		fbu , 
		debug
            });
            log("Trainer init");
        }
    };


    let clean_up = ()=> { log("trainer unmounted"); };
    useInit({ init , clean_up });  //my wrapper around useEffect


    let default_path = "train/ap_to_handoff"
    /* 
       Note that Train stands for Transformation Repository for Ai INference
       Todo: get params from url hash to autopopulate path, this allows another page to redirect and autofill components 
     */

    const [path, setPath] = useState<string>(default_path);
    const [appId, setAppId] = useState<string>("autocare");
    const [inputContent, setInputContent] = useState<string>("");
    const [outputContent, setOutputContent] = useState<string>("");    
    const [error, setError] = useState<string | null>(null);

    const handlePathChange = (event: React.ChangeEvent<HTMLInputElement>) => {
	setPath(event.target.value);
    };

    const handleAppIdChange = (event: React.ChangeEvent<HTMLInputElement>) => {
	setAppId(event.target.value);
    };

    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
	setInputContent(event.target.value);
    };
    
    const handleOutputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
	setOutputContent(event.target.value);
    };

    
    const handleSubmit = async () => {
	try {
	    // Clear previous errors
	    setError(null);

	    // Validate the path

	    /*
	       Note that for now the path will be even becuase of storing a document directly into a collection (and not providing the document id and letting it be autogenerated) 
	     */ 
	    
	    const pathElements = path.split("/").filter((el) => el.trim() !== "");
	    if (! (pathElements.length % 2 === 0  )   ) {
		throw new Error("The path must have an even number of elements.");
	    }

	    // Parse JSON content
	    let jsonData = {
		input : inputContent,
		output : outputContent 
	    }
	    
	    // Call the store_user_doc function
	    await store_user_collection({
		app_id: appId,
		path: pathElements,
		data: jsonData,
	    });

	    setError("TRAIN example stored successfully!");
	    setTimeout( ()=> setError(null) , 4000) 
	} catch (err: any) {
	    setError(err.message || "An unknown error occurred.");
	}
    } ; 

    return (
        <Box display="flex" flexDirection="column" height="100%" width="100%">
            <Box display="flex" justifyContent="center" marginBottom="20px" width="100%" >
		
            </Box>
            <Box flexGrow={1} width={`100%`} margin="0 auto" display="flex" flexDirection="column" padding='40px'>

		<Typography variant="h5" gutterBottom>
		    Transformation Repository for AI Inference (TRAIN)
		</Typography>

		<Box width="30%">
		    <TextField
			fullWidth
			label="App ID"
			value={appId}

			onChange={handleAppIdChange}
			margin="normal"

			placeholder="Enter App ID (default: autocare)"
		    />
		</Box>

		<Box width="30%">

		    <TextField
			label="Path"
			value={path}
			onChange={handlePathChange}
			margin="normal"
			       fullWidth 
			placeholder="Enter a backslashed delimited odd length path (e.g, train/examples/id)"
		    />
		</Box>



		<Box display='flex' flexDirection='row'  width="100%">

		    <Box width="40%">
			<Typography variant="subtitle1" gutterBottom>
			    Input
			</Typography>

			<TextField
			    id="filled-multiline-flexible"
			    label="Input"
			    multiline
			    fullWidth
			    minRows={4}
			    variant="filled"
			    value={inputContent}
			    onChange={handleInputChange}
			/>

			
		    </Box>



		    <Box width="40%" marginLeft="35px">
			<Typography variant="subtitle1" gutterBottom>
			    Output
			</Typography>

			<TextField
			    id="filled-multiline-flexible"
			    label="Output"
			    multiline
			    minRows={4}
		       	    fullWidth
			    variant="filled"
			    value={outputContent}
			    onChange={handleOutputChange}
			/>

			
		    </Box>



		</Box>

		
		{error && (
		    <Typography color="error" sx={{ marginTop: 2 }}>
			{error}
		    </Typography>
		)}

		<Box width="20%">
		<Button
		    variant="contained"
		    color="primary"
		    onClick={handleSubmit}
		    sx={{ marginTop: 3 }}
		>
		    Submit
		</Button>
		</Box>
	    </Box>

        </Box>

    );
};

export default Trainer;

