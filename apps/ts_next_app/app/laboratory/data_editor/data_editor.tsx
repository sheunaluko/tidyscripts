'use client';

import React, { useState } from 'react';

import AceEditor from "react-ace";

import "ace-builds/src-noconflict/mode-json";
import "ace-builds/src-noconflict/theme-kuroir";
import "ace-builds/src-noconflict/theme-solarized_dark";
import "ace-builds/src-noconflict/ext-language_tools";


import * as tsw from "tidyscripts_web";
import useInit from "../../../hooks/useInit";

import {theme} from "../../theme";
import { ThemeProvider, createTheme } from '@mui/material/styles';
import { Box, TextField, Button, Typography } from "@mui/material";

import {store_user_doc, store_user_collection} from "../../../src/firebase_utils" 

const log    = tsw.common.logger.get_logger({id:"data_editor"});
const debug  = tsw.common.util.debug
const fp     = tsw.common.fp


const DataEditor = () => {

    let init = async function() {
        /* Assign tidyscripts library to window */
        if (typeof window !== 'undefined') { 
            Object.assign(window, {
                tsw,
		fp, 
		debug
            });
            log("DataEditor init");
        }
    };


    let clean_up = ()=> { log("data editor unmounted"); };
    useInit({ init , clean_up });  //my wrapper around useEffect


    let init_json_content = `
{
   "input_text" :  ""   , 
   "output_text" :   ""  
}  
    `

    let default_path = "train/ap_to_handoff"
    /* Note that Train stands for Transformation Repository for Ai INference  */

    const [path, setPath] = useState<string>(default_path);
    const [appId, setAppId] = useState<string>("autocare");
    const [jsonContent, setJsonContent] = useState<string>(init_json_content);
    const [error, setError] = useState<string | null>(null);

    const handlePathChange = (event: React.ChangeEvent<HTMLInputElement>) => {
	setPath(event.target.value);
    };

    const handleAppIdChange = (event: React.ChangeEvent<HTMLInputElement>) => {
	setAppId(event.target.value);
    };

    const handleJsonChange = (newValue: string) => {
	setJsonContent(newValue);
    };

    const handleSubmit = async () => {
	try {
	    // Clear previous errors
	    setError(null);

	    // Validate the path

	    /*
	       Note that for now the path will be even becuase of storing a document directly into a collection (and not providing the document id and letting it be autogenerated) 
	    */ 
	    
	    const pathElements = path.split("/").filter((el) => el.trim() !== "");
	    if (! (pathElements.length % 2 === 0  )   ) {
		throw new Error("The path must have an even number of elements.");
	    }

	    // Parse JSON content
	    let jsonData;
	    try {
		log(`Json content: ${jsonContent}`)
		debug.add('jsonContent', jsonContent) 
		jsonData = JSON.parse(jsonContent);
	    } catch (e) {
		throw new Error("Invalid JSON format (note: use double quotes for key values).");
	    }

	    // Call the store_user_doc function
	    await store_user_collection({
		app_id: appId,
		path: pathElements,
		data: jsonData,
	    });

	    setError("Document stored successfully!");
	    setTimeout( ()=> setError(null) , 4000) 
	} catch (err: any) {
	    setError(err.message || "An unknown error occurred.");
	}
    } ; 

    return (
        <Box display="flex" flexDirection="column" height="100%" width="100%">
            <Box display="flex" justifyContent="center" marginBottom="20px" width="100%">
		
            </Box>
            <Box flexGrow={1} width={`100%`} margin="0 auto" display="flex" flexDirection="column">

		<Typography variant="h5" gutterBottom>
		    Store User Document
		</Typography>

		<Box width="30%">
		    <TextField
			fullWidth
			label="App ID"
			       value={appId}

			       onChange={handleAppIdChange}
			       margin="normal"

			       placeholder="Enter App ID (default: autocare)"
		    />
		</Box>

		<Box width="30%">

		    <TextField
			label="Path"
			       value={path}
			       onChange={handlePathChange}
			       margin="normal"
			fullWidth 
			placeholder="Enter a backslashed delimited odd length path (e.g, train/examples/id)"
		    />
		</Box> 

		<Typography variant="subtitle1" gutterBottom>
		    JSON Content
		</Typography>
		<AceEditor
		    mode="json"
		    theme="solarized_dark"
		    showPrintMargin={false}
		    name="json-editor"
		    value={jsonContent}
		    onChange={handleJsonChange}
		    editorProps={{ $blockScrolling: true }}
		    setOptions={{
			showLineNumbers: true,
			tabSize: 2,
			// @ts-ignore 
			useWorker : false , 
		    }}
		    width="100%"
		    height="200px"
		/>

		{error && (
		    <Typography color="error" sx={{ marginTop: 2 }}>
			{error}
		    </Typography>
		)}

		<Button
		    variant="contained"
		    color="primary"
		    onClick={handleSubmit}
		    sx={{ marginTop: 2 }}
		>
		    Submit
		</Button>
	    </Box>

        </Box>

    );
};

export default DataEditor;

